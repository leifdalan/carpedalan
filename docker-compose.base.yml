version: '2.4'

services:
  alb:
    image: nginx:alpine
    restart: always
    volumes: 
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/local.carpedalan.com.pem:/etc/ssl/certs/local.carpedalan.com.pem
      - ./nginx/local.carpedalan.com-key.pem:/etc/ssl/private/local.carpedalan.com-key.pem
    healthcheck: 
      test: wget http://localhost/healthcheck -q -O - > /dev/null 2>&1
      interval: 1s
      timeout: 5s
      retries: 30

  api:
    tty: true
    build:
      context: .
      dockerfile: ./server/Dockerfile
      target: dev
    environment:
      PORT: 8001
      PROD_BUILD: "${PROD_BUILD-false}"
      ASSET_CDN_DOMAIN: cdn.local.carpedalan.com
    command: yarn migrateAndStart
    healthcheck:
      test: ["CMD-SHELL", "node ./scripts/healthcheck"]
      interval: 1s
      timeout: 1s
      retries: 120

  client: 
    tty: true
    build:
      context: .
      dockerfile: client/Dockerfile
    environment:
      NODE_ENV: "${NODE_ENV-development}"
      PROD_BUILD: "${PROD_BUILD-false}"
      PORT: "${CLIENT_PORT-4000}"
      ASSET_CDN_DOMAIN: 'cdn.local.carpedalan.com'
    volumes: 
      - ./client/src:/app/client/src
      - ./client/docs:/app/client/docs
      - ./client/dist:/app/client/dist
      - ./scripts:/app/client/scripts
      - ./client/webpack.config.js:/app/client/webpack.config.js
      - ./client/webpack.config.prod.js:/app/client/webpack.config.prod.js
      - ./client/devServer.js:/app/client/devServer.js
      - ./client/docker-entry.sh:/app/client/docker-entry.sh
      - ./.eslint-ts-base.js:/app/.eslint-ts-base.js
    healthcheck: 
      test: ["CMD-SHELL", "node ./scripts/clientHealthcheck"]
      interval: 1s
      timeout: 1s
      retries: 120

    command: ['./docker-entry.sh']

  pg:
    image: postgres:10.0-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 1s
      timeout: 1s
      retries: 20

  pg_test:
    image: postgres:10.0-alpine
    ports:
      - "5555:5432"
    # command: '-p 5555'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 1s
      timeout: 1s
      retries: 20

  pg_migrate:
    environment: 
      NODE_ENV: test
      MIGRATING: 'true'
      PG_HOST: pg_test
      PG_PORT: 5432
    tty: true
    volumes:
      - ./db:/app/db:delegated
      - ./shared:/app/shared:delegated
    build:
      context: .
      dockerfile: ./server/Dockerfile
      target: dev
    command: yarn migrate
  sam:
    build: 
      context: ./imageResizer
      dockerfile: Dockerfile
    command: ["$PWD"]
    volumes:
      - ./imageresizer:/app
      - /var/run/docker.sock:/var/run/docker.sock

  aws:
    image: localstack/localstack:0.10.5
    volumes:
      - './.localstack:/tmp/localstack'
      - '/var/run/docker.sock:/var/run/docker.sock'    
    environment:
      - DEBUG=1
      - DATA_DIR=/tmp/localstack/data
      - PORT_WEB_UI=8081
      - SERVICES=s3

  pw:
    build:
      context: .
      dockerfile: ./e2e/Dockerfile
    volumes:
      - './e2e/src:/e2e/src/'
      - './e2e/screenshots:/e2e/screenshots/'

  redis: 
    image: redis:5.0.6
    
