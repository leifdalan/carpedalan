# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
# build job parameters as a template
defaults: &defaults
  docker:
    - image: circleci/node:10
    - image: postgres:10.0-alpine
  working_directory: ~/repo

version: 2
jobs:

  stage: 
    machine: true
    working_directory: ~/repo
    parallelism: 1
    steps:
      - checkout
      - run: 
          name: Install AWS CLI
          command: |
              sudo apt-get install curl
              pip install \
              awscli==1.15.82

      - run: 
          name: Download heroku.sh
          command: |
              aws s3 cp s3://configurations-pipeline/heroku.sh .
      - run: 
          name: Release heroku
          command: | 
              source heroku.sh
              echo $WEB_DOCKER_IMAGE_ID
              ./scripts/releaseDocker.sh



  deploy: 
    machine: true
    working_directory: ~/repo
    parallelism: 1
    steps:
      - checkout
      - run: 
          name: Install AWS CLI
          command: |
              pip install \
              awscli==1.15.82

      - run:
          name: Register task definition
          command: |
              ./scripts/makeRevisionJson.js 
              cat ./container-definition.json

              
              aws ecs register-task-definition \
                --cli-input-json file://container-definition.json \
                --family carpedalan \
                --region us-east-1
      - run: 
          name: Update ECS service
          command: |
              OLD_TASK_ID=`aws ecs list-tasks \
                --cluster carpedalan \
                --desired-status RUNNING \
                --region us-east-1 \
                --family carpedalan | \
                  egrep "task" | tr "/" " " | tr "[" " " |  awk '{print $2}' | sed 's/"$//'`

              TASK_REVISION=`aws ecs describe-task-definition \
                --task-definition carpedalan \
                --region us-east-1 | \
                egrep "revision" | tr "/" " " | awk '{print $2}' | sed 's/"$//'`

              echo "Updating with task revision ${TASK_REVISION}";

              aws ecs update-service \
                --cluster carpedalan \
                --service carpedalan \
                --region us-east-1 \
                --task-definition carpedalan:${TASK_REVISION} \
                --desired-count 1

              # sleep 30
              # echo "Stopping ${OLD_TASK_ID}"
              # aws ecs stop-task \
              #   --task 92244d16-8569-4ebe-a1a2-069f7bf5c0c0 \
              #   --cluster carpedalan \
              #   --region us-east-1

              # echo "Updating to desired count=2"
              # aws ecs update-service \
              #   --cluster carpedalan \
              #   --service carpedalan \
              #   --task-definition carpedalan:${TASK_REVISION} \
              #   --desired-count 2 \
              #   --region us-east-1
      # - run:
      #     name: Deploy to heroku
      #     command: |
      #         ls -al
      #         ./scripts/releaseDocker.sh


  e2e:  
    machine: true
    working_directory: ~/repo
    parallelism: 1
    steps:
      - checkout
      - run: 
          name: Install AWS CLI
          command: |
              pip install \
              awscli==1.15.82
  
      - run:
          name: Run app
          command: | 
            docker-compose --version
            aws s3 cp s3://configurations-pipeline/.env . 
            eval $(aws ecr \
                get-login \
                --region us-east-1 \
                --no-include-email\
                ) 
            docker-compose \
                -f docker-compose.e2e.yml \
                up --abort-on-container-exit
  
      - store_test_results:
            path: cypress
      - store_artifacts:
            path: cypress/videos
      - store_artifacts:
            path: cypress/screenshots  
  build:
    machine: true
    environment:
      NODE_ENV: production
      FARTS: stinky
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk update && \
            apk upgrade && \
            apk add --no-cache \
              py-pip=9.0.0-r1 \
              nodejs=6.9.5-r2 \
              curl=7.61.1-r1
            pip install \
              docker-compose==1.22.0 \
              awscli==1.15.82
      - run: 
          name: Get config
          command: |
            aws s3 cp s3://configurations-pipeline/.env . 
            aws s3 cp s3://configurations-pipeline/pk-APKAIUIJTQRAIWFPJFEA.pem .
      - run:
          name: Build application Docker image
          command: |
            docker build \
            --target=prod \
            -t app \
            -t "${ECR_ENDPOINT}/carpedev:${CIRCLE_SHA1}" .

      - run:
          name: Push image to ECR repository
          command: |
            # if [ "${CIRCLE_BRANCH}" == "master" ]; then
              eval $(aws ecr get-login --region us-east-1 --no-include-email) 
              docker tag app "${ECR_ENDPOINT}/carpedev:${CIRCLE_SHA1}"
              docker push "${ECR_ENDPOINT}/carpedev:${CIRCLE_SHA1}"
      - run: 
          name: Push image to heroku
          command: | 
            docker login --username=_ --password=${HEROKU_PASSWORD} registry.heroku.com
            docker tag app registry.heroku.com/carpedalan/web
            docker push registry.heroku.com/carpedalan/web
            WEB_DOCKER_IMAGE_ID=`\
                docker inspect \
                registry.heroku.com/carpedalan/web \
                --format={{.Id}} | sed -n 1p`
                echo $WEB_DOCKER_IMAGE_ID
            touch heroku.sh
            echo "WEB_DOCKER_IMAGE_ID=${WEB_DOCKER_IMAGE_ID}" >> heroku.sh
            aws s3 cp heroku.sh s3://configurations-pipeline/
      # - run: 
      #     name: Push image to Heroku registry
      #     command: |
      #         ./scripts/releaseDocker.sh
  dependencies:
    docker:
      - image: circleci/node:10
      
    working_directory: ~/repo
    

    steps:
      - checkout
      - run: 
          name: Install node dependencies
          command: yarn --ignore-optional
      - run: 
          name: Upload S3 assets
          command: |
              yarn build
              ls -al
              pwd
              ./scripts/uploadAssets.js
              cat dist/manifest.json

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
        
  lint:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: "ESLint"
          command: yarn lint --format junit -o reports/junit/js-lint-results.xml

      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: reports/junit

  migrate:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run: 
          name: Get env file
          command: |
              ./scripts/getFromS3.js
      

      - run:
          name: "Migrate"
          command: |
            ls -al
            NODE_ENV=production MIGRATING=true yarn knex migrate:latest --knexfile db/knexfile.js


  unit_test:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
    
      - run:
          name: "Jest FE"
          environment:
            JEST_JUNIT_OUTPUT: reports/junit/js-test-results.xml
          command: yarn test --ci --testResultsProcessor="jest-junit" --coverage
      - run: 
          name: Upload Coverage
          command: |
              ./scripts/uploadTests.js

      - store_test_results:
          path: reports/
      - store_artifacts:
          path: reports/

  integration:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: API Integration tests
          command: yarn integration:ci --coverage
      - run: 
          name: Upload Coverage
          command: |
              ./scripts/uploadTests.js

      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: reports/junit


workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - dependencies
      - unit_test:
          requires:
            - dependencies
      - lint:
          requires:
            - dependencies
      - integration:
          requires:
            - dependencies
      - migrate:
          requires:
            - stage
      - e2e:
          requires:
            - build
      - stage: 
          requires: 
            - e2e
            - lint
            - integration
            - unit_test
          filters: 
            branches: 
              ignore: 
                - master
      - deploy: 
          requires: 
            - e2e
            - lint
            - integration
            - unit_test
        #   filters: 
        #     branches: 
        #       only: 
        #         - master
