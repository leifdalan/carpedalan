# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
# build job parameters as a template
defaults: &defaults
  docker:
    - image: circleci/node:10
    - image: postgres:10.0-alpine
  working_directory: ~/repo

version: 2
jobs:
  e2e:  
    machine: true
    working_directory: ~/repo
    parallelism: 1
    steps:
      - checkout
      - run:
          name: Run app
          command: | 
            docker-compose --version
            aws s3 cp s3://configurations-pipeline/.env . 
            eval $(aws ecr \
              get-login \
              --region us-east-1 \
              --no-include-email\
              ) 
            docker-compose \
              -f docker-compose.e2e.yml \
              up --abort-on-container-exit

      - store_test_results:
          path: cypress
      - store_artifacts:
          path: cypress/videos
      - store_artifacts:
          path: cypress/screenshots  
  build:
    working_directory: /app
    docker:
      - image: docker:17.05.0-ce-git
    environment:
      NODE_ENV: production
      FARTS: stinky
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
              py-pip=9.0.0-r1 \
              nodejs=6.9.5-r2
            pip install \
              docker-compose==1.22.0 \
              awscli==1.15.82
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
          paths:
            - /caches/app.tar
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/app.tar | true
      - run: 
          name: Get config
          command: |
            aws s3 cp s3://configurations-pipeline/.env . 
      - run:
          name: Build application Docker image
          command: |
            docker build \
            --target=prod \
            -t app \
            -t "${ECR_ENDPOINT}/carpedev:${CIRCLE_SHA1}" .
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            docker save -o /caches/app.tar app
      - save_cache:
          key: v1-{{ .Branch }}
          paths:
            - /caches/app.tar
      - deploy:
          name: Push application Docker image
          command: |
            # if [ "${CIRCLE_BRANCH}" == "master" ]; then
              eval $(aws ecr get-login --region us-east-1 --no-include-email) 
              docker tag app "${ECR_ENDPOINT}/carpedev:${CIRCLE_SHA1}"
              docker push "${ECR_ENDPOINT}/carpedev:${CIRCLE_SHA1}"
              ./scripts/makeRevisionJson.js 
              TASK_ID=`aws ecs list-tasks \
                --cluster carpedalan \
                --desired-status RUNNING \
                --family carpedalan \
                --region us-east-1 | \
                egrep "task" | tr "/" " " | tr "[" " " |  awk '{print $2}' | sed 's/"$//'`

              # aws ecs stop-task \
              #   --cluster carpedalan \
              #   --task ${TASK_ID} \
              #   --region us-east-1

              aws ecs register-task-definition \
                --cli-input-json file://container-definition.json \
                --family carpedalan \
                --region us-east-1

              TASK_REVISION=`aws ecs describe-task-definition \
                --task-definition carpedalan \
                --region us-east-1 | \
                egrep "revision" | tr "/" " " | awk '{print $2}' | sed 's/"$//'`

              aws ecs update-service \
                --cluster carpedalan \
                --service carpedalan \
                --region us-east-1 \
                --task-definition carpedalan:${TASK_REVISION} \
                --desired-count 1
            # fi  
  dependencies:
    docker:
      # specify the version you desire here
      - image: circleci/node:10
      
    working_directory: ~/repo
    

    steps:
      - checkout
      # Download and cache dependencies
      - run: npm install

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
        
  lint:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: "ESLint"
          command: yarn lint --format junit -o reports/junit/js-lint-results.xml

      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: reports/junit

  unit_test:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
    
      - run:
          name: "Jest FE"
          environment:
            JEST_JUNIT_OUTPUT: reports/junit/js-test-results.xml
          command: yarn test --ci --testResultsProcessor="jest-junit"
      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: reports/junit

  integration:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: API Integration tests
          command: yarn integration:ci --coverage
      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: reports/junit
workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - dependencies
      - unit_test:
          requires:
            - dependencies
      - lint:
          requires:
            - dependencies
      - integration:
          requires:
            - dependencies
      - e2e:
          requires:
            - build
